library verilog;
use verilog.vl_types.all;
entity memc_tb_top is
    generic(
        C_SIMULATION    : string  := "FALSE";
        C_NUM_DQ_PINS   : integer := 4;
        C_MEM_BURST_LEN : integer := 8;
        C_MEM_NUM_COL_BITS: integer := 11;
        C_SMALL_DEVICE  : string  := "FALSE";
        C_PORT_ENABLE   : vl_logic_vector(0 to 5) := (Hi1, Hi1, Hi1, Hi1, Hi1, Hi1);
        C_P0_MASK_SIZE  : integer := 4;
        C_P0_DATA_PORT_SIZE: integer := 32;
        C_P1_MASK_SIZE  : integer := 4;
        C_P1_DATA_PORT_SIZE: integer := 32;
        C_P0_PORT_MODE  : string  := "BI_MODE";
        C_P1_PORT_MODE  : string  := "BI_MODE";
        C_P2_PORT_MODE  : string  := "RD_MODE";
        C_P3_PORT_MODE  : string  := "RD_MODE";
        C_P4_PORT_MODE  : string  := "RD_MODE";
        C_P5_PORT_MODE  : string  := "RD_MODE";
        C_p0_BEGIN_ADDRESS: integer := 256;
        C_p0_DATA_MODE  : vl_logic_vector(0 to 3) := (Hi0, Hi0, Hi1, Hi0);
        C_p0_END_ADDRESS: integer := 767;
        C_p0_PRBS_EADDR_MASK_POS: vl_logic_vector(31 downto 0) := (Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0);
        C_p0_PRBS_SADDR_MASK_POS: integer := 256;
        C_p1_BEGIN_ADDRESS: integer := 768;
        C_p1_DATA_MODE  : vl_logic_vector(0 to 3) := (Hi0, Hi0, Hi1, Hi0);
        C_p1_END_ADDRESS: integer := 1279;
        C_p1_PRBS_EADDR_MASK_POS: vl_logic_vector(31 downto 0) := (Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0);
        C_p1_PRBS_SADDR_MASK_POS: integer := 768;
        C_p2_BEGIN_ADDRESS: integer := 256;
        C_p2_DATA_MODE  : vl_logic_vector(0 to 3) := (Hi0, Hi0, Hi1, Hi0);
        C_p2_END_ADDRESS: integer := 767;
        C_p2_PRBS_EADDR_MASK_POS: vl_logic_vector(31 downto 0) := (Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0);
        C_p2_PRBS_SADDR_MASK_POS: integer := 256;
        C_p3_BEGIN_ADDRESS: integer := 256;
        C_p3_DATA_MODE  : vl_logic_vector(0 to 3) := (Hi0, Hi0, Hi1, Hi0);
        C_p3_END_ADDRESS: integer := 767;
        C_p3_PRBS_EADDR_MASK_POS: vl_logic_vector(31 downto 0) := (Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0);
        C_p3_PRBS_SADDR_MASK_POS: integer := 256;
        C_p4_BEGIN_ADDRESS: integer := 256;
        C_p4_DATA_MODE  : vl_logic_vector(0 to 3) := (Hi0, Hi0, Hi1, Hi0);
        C_p4_END_ADDRESS: integer := 767;
        C_p4_PRBS_EADDR_MASK_POS: vl_logic_vector(31 downto 0) := (Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0);
        C_p4_PRBS_SADDR_MASK_POS: integer := 256;
        C_p5_BEGIN_ADDRESS: integer := 256;
        C_p5_DATA_MODE  : vl_logic_vector(0 to 3) := (Hi0, Hi0, Hi1, Hi0);
        C_p5_END_ADDRESS: integer := 767;
        C_p5_PRBS_EADDR_MASK_POS: vl_logic_vector(31 downto 0) := (Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0);
        C_p5_PRBS_SADDR_MASK_POS: integer := 256
    );
    port(
        clk0            : in     vl_logic;
        rst0            : in     vl_logic;
        calib_done      : in     vl_logic;
        p0_mcb_cmd_en   : out    vl_logic;
        p0_mcb_cmd_instr: out    vl_logic_vector(2 downto 0);
        p0_mcb_cmd_bl   : out    vl_logic_vector(5 downto 0);
        p0_mcb_cmd_addr : out    vl_logic_vector(29 downto 0);
        p0_mcb_cmd_full : in     vl_logic;
        p0_mcb_wr_en    : out    vl_logic;
        p0_mcb_wr_mask  : out    vl_logic_vector;
        p0_mcb_wr_data  : out    vl_logic_vector;
        p0_mcb_wr_full  : in     vl_logic;
        p0_mcb_wr_fifo_counts: in     vl_logic_vector(6 downto 0);
        p0_mcb_rd_en    : out    vl_logic;
        p0_mcb_rd_data  : in     vl_logic_vector;
        p0_mcb_rd_empty : in     vl_logic;
        p0_mcb_rd_fifo_counts: in     vl_logic_vector(6 downto 0);
        p1_mcb_cmd_en   : out    vl_logic;
        p1_mcb_cmd_instr: out    vl_logic_vector(2 downto 0);
        p1_mcb_cmd_bl   : out    vl_logic_vector(5 downto 0);
        p1_mcb_cmd_addr : out    vl_logic_vector(29 downto 0);
        p1_mcb_cmd_full : in     vl_logic;
        p1_mcb_wr_en    : out    vl_logic;
        p1_mcb_wr_mask  : out    vl_logic_vector;
        p1_mcb_wr_data  : out    vl_logic_vector;
        p1_mcb_wr_full  : in     vl_logic;
        p1_mcb_wr_fifo_counts: in     vl_logic_vector(6 downto 0);
        p1_mcb_rd_en    : out    vl_logic;
        p1_mcb_rd_data  : in     vl_logic_vector;
        p1_mcb_rd_empty : in     vl_logic;
        p1_mcb_rd_fifo_counts: in     vl_logic_vector(6 downto 0);
        p2_mcb_cmd_en   : out    vl_logic;
        p2_mcb_cmd_instr: out    vl_logic_vector(2 downto 0);
        p2_mcb_cmd_bl   : out    vl_logic_vector(5 downto 0);
        p2_mcb_cmd_addr : out    vl_logic_vector(29 downto 0);
        p2_mcb_cmd_full : in     vl_logic;
        p2_mcb_wr_en    : out    vl_logic;
        p2_mcb_wr_mask  : out    vl_logic_vector(3 downto 0);
        p2_mcb_wr_data  : out    vl_logic_vector(31 downto 0);
        p2_mcb_wr_full  : in     vl_logic;
        p2_mcb_wr_fifo_counts: in     vl_logic_vector(6 downto 0);
        p2_mcb_rd_en    : out    vl_logic;
        p2_mcb_rd_data  : in     vl_logic_vector(31 downto 0);
        p2_mcb_rd_empty : in     vl_logic;
        p2_mcb_rd_fifo_counts: in     vl_logic_vector(6 downto 0);
        p3_mcb_cmd_en   : out    vl_logic;
        p3_mcb_cmd_instr: out    vl_logic_vector(2 downto 0);
        p3_mcb_cmd_bl   : out    vl_logic_vector(5 downto 0);
        p3_mcb_cmd_addr : out    vl_logic_vector(29 downto 0);
        p3_mcb_cmd_full : in     vl_logic;
        p3_mcb_wr_en    : out    vl_logic;
        p3_mcb_wr_mask  : out    vl_logic_vector(3 downto 0);
        p3_mcb_wr_data  : out    vl_logic_vector(31 downto 0);
        p3_mcb_wr_full  : in     vl_logic;
        p3_mcb_wr_fifo_counts: in     vl_logic_vector(6 downto 0);
        p3_mcb_rd_en    : out    vl_logic;
        p3_mcb_rd_data  : in     vl_logic_vector(31 downto 0);
        p3_mcb_rd_empty : in     vl_logic;
        p3_mcb_rd_fifo_counts: in     vl_logic_vector(6 downto 0);
        p4_mcb_cmd_en   : out    vl_logic;
        p4_mcb_cmd_instr: out    vl_logic_vector(2 downto 0);
        p4_mcb_cmd_bl   : out    vl_logic_vector(5 downto 0);
        p4_mcb_cmd_addr : out    vl_logic_vector(29 downto 0);
        p4_mcb_cmd_full : in     vl_logic;
        p4_mcb_wr_en    : out    vl_logic;
        p4_mcb_wr_mask  : out    vl_logic_vector(3 downto 0);
        p4_mcb_wr_data  : out    vl_logic_vector(31 downto 0);
        p4_mcb_wr_full  : in     vl_logic;
        p4_mcb_wr_fifo_counts: in     vl_logic_vector(6 downto 0);
        p4_mcb_rd_en    : out    vl_logic;
        p4_mcb_rd_data  : in     vl_logic_vector(31 downto 0);
        p4_mcb_rd_empty : in     vl_logic;
        p4_mcb_rd_fifo_counts: in     vl_logic_vector(6 downto 0);
        p5_mcb_cmd_en   : out    vl_logic;
        p5_mcb_cmd_instr: out    vl_logic_vector(2 downto 0);
        p5_mcb_cmd_bl   : out    vl_logic_vector(5 downto 0);
        p5_mcb_cmd_addr : out    vl_logic_vector(29 downto 0);
        p5_mcb_cmd_full : in     vl_logic;
        p5_mcb_wr_en    : out    vl_logic;
        p5_mcb_wr_mask  : out    vl_logic_vector(3 downto 0);
        p5_mcb_wr_data  : out    vl_logic_vector(31 downto 0);
        p5_mcb_wr_full  : in     vl_logic;
        p5_mcb_wr_fifo_counts: in     vl_logic_vector(6 downto 0);
        p5_mcb_rd_en    : out    vl_logic;
        p5_mcb_rd_data  : in     vl_logic_vector(31 downto 0);
        p5_mcb_rd_empty : in     vl_logic;
        p5_mcb_rd_fifo_counts: in     vl_logic_vector(6 downto 0);
        vio_modify_enable: in     vl_logic;
        vio_data_mode_value: in     vl_logic_vector(2 downto 0);
        vio_addr_mode_value: in     vl_logic_vector(2 downto 0);
        cmp_data        : out    vl_logic_vector(31 downto 0);
        cmp_data_valid  : out    vl_logic;
        cmp_error       : out    vl_logic;
        error           : out    vl_logic;
        p0_error_status : out    vl_logic_vector;
        p1_error_status : out    vl_logic_vector;
        p2_error_status : out    vl_logic_vector(127 downto 0);
        p3_error_status : out    vl_logic_vector(127 downto 0);
        p4_error_status : out    vl_logic_vector(127 downto 0);
        p5_error_status : out    vl_logic_vector(127 downto 0)
    );
    attribute mti_svvh_generic_type : integer;
    attribute mti_svvh_generic_type of C_SIMULATION : constant is 1;
    attribute mti_svvh_generic_type of C_NUM_DQ_PINS : constant is 1;
    attribute mti_svvh_generic_type of C_MEM_BURST_LEN : constant is 1;
    attribute mti_svvh_generic_type of C_MEM_NUM_COL_BITS : constant is 1;
    attribute mti_svvh_generic_type of C_SMALL_DEVICE : constant is 1;
    attribute mti_svvh_generic_type of C_PORT_ENABLE : constant is 1;
    attribute mti_svvh_generic_type of C_P0_MASK_SIZE : constant is 1;
    attribute mti_svvh_generic_type of C_P0_DATA_PORT_SIZE : constant is 1;
    attribute mti_svvh_generic_type of C_P1_MASK_SIZE : constant is 1;
    attribute mti_svvh_generic_type of C_P1_DATA_PORT_SIZE : constant is 1;
    attribute mti_svvh_generic_type of C_P0_PORT_MODE : constant is 1;
    attribute mti_svvh_generic_type of C_P1_PORT_MODE : constant is 1;
    attribute mti_svvh_generic_type of C_P2_PORT_MODE : constant is 1;
    attribute mti_svvh_generic_type of C_P3_PORT_MODE : constant is 1;
    attribute mti_svvh_generic_type of C_P4_PORT_MODE : constant is 1;
    attribute mti_svvh_generic_type of C_P5_PORT_MODE : constant is 1;
    attribute mti_svvh_generic_type of C_p0_BEGIN_ADDRESS : constant is 1;
    attribute mti_svvh_generic_type of C_p0_DATA_MODE : constant is 1;
    attribute mti_svvh_generic_type of C_p0_END_ADDRESS : constant is 1;
    attribute mti_svvh_generic_type of C_p0_PRBS_EADDR_MASK_POS : constant is 1;
    attribute mti_svvh_generic_type of C_p0_PRBS_SADDR_MASK_POS : constant is 1;
    attribute mti_svvh_generic_type of C_p1_BEGIN_ADDRESS : constant is 1;
    attribute mti_svvh_generic_type of C_p1_DATA_MODE : constant is 1;
    attribute mti_svvh_generic_type of C_p1_END_ADDRESS : constant is 1;
    attribute mti_svvh_generic_type of C_p1_PRBS_EADDR_MASK_POS : constant is 1;
    attribute mti_svvh_generic_type of C_p1_PRBS_SADDR_MASK_POS : constant is 1;
    attribute mti_svvh_generic_type of C_p2_BEGIN_ADDRESS : constant is 1;
    attribute mti_svvh_generic_type of C_p2_DATA_MODE : constant is 1;
    attribute mti_svvh_generic_type of C_p2_END_ADDRESS : constant is 1;
    attribute mti_svvh_generic_type of C_p2_PRBS_EADDR_MASK_POS : constant is 1;
    attribute mti_svvh_generic_type of C_p2_PRBS_SADDR_MASK_POS : constant is 1;
    attribute mti_svvh_generic_type of C_p3_BEGIN_ADDRESS : constant is 1;
    attribute mti_svvh_generic_type of C_p3_DATA_MODE : constant is 1;
    attribute mti_svvh_generic_type of C_p3_END_ADDRESS : constant is 1;
    attribute mti_svvh_generic_type of C_p3_PRBS_EADDR_MASK_POS : constant is 1;
    attribute mti_svvh_generic_type of C_p3_PRBS_SADDR_MASK_POS : constant is 1;
    attribute mti_svvh_generic_type of C_p4_BEGIN_ADDRESS : constant is 1;
    attribute mti_svvh_generic_type of C_p4_DATA_MODE : constant is 1;
    attribute mti_svvh_generic_type of C_p4_END_ADDRESS : constant is 1;
    attribute mti_svvh_generic_type of C_p4_PRBS_EADDR_MASK_POS : constant is 1;
    attribute mti_svvh_generic_type of C_p4_PRBS_SADDR_MASK_POS : constant is 1;
    attribute mti_svvh_generic_type of C_p5_BEGIN_ADDRESS : constant is 1;
    attribute mti_svvh_generic_type of C_p5_DATA_MODE : constant is 1;
    attribute mti_svvh_generic_type of C_p5_END_ADDRESS : constant is 1;
    attribute mti_svvh_generic_type of C_p5_PRBS_EADDR_MASK_POS : constant is 1;
    attribute mti_svvh_generic_type of C_p5_PRBS_SADDR_MASK_POS : constant is 1;
end memc_tb_top;
